import os
import subprocess
import sys

class DjangoProjectManager:
    """Manages the creation of Django projects and apps."""

    @staticmethod
    def create_django_project(project_name, app_name=None):
        """Create a Django project and optionally an app."""
        try:
            subprocess.run(['uv', 'run', 'django-admin', 'startproject', project_name, '.'], check=True)
            print(f"Django project '{project_name}' created successfully.")

            if app_name:
                subprocess.run(['uv', 'run', 'python', 'manage.py', 'startapp', app_name], check=True)
                print(f"Django app '{app_name}' created successfully.")
                
            DjangoProjectManager.create_additional_folders(app_name)
        except subprocess.CalledProcessError as e:
            print(f"Failed to create Django project or app: {str(e)}")
            sys.exit(1)

    @staticmethod
    def create_additional_folders(app_name):
        """Create templates, static folders, initial files, and environment files."""
        os.makedirs("templates/partials", exist_ok=True)
        os.makedirs("static/css", exist_ok=True)
        os.makedirs("static/js", exist_ok=True)
        os.makedirs("static/img", exist_ok=True)

        # Create the base.html file in the templates directory
        with open("templates/base.html", 'w') as f:
            f.write("""{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Home{% endblock %}</title>
    <meta name="description" content="{% block description %}Home Page{% endblock %}">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="stylesheet" href="{% static 'css/output.css' %}">
</head>
<body>
    {% block content %}{% endblock %}
</body>
</html>""")

        # App-level directories and files
        if app_name:
            app_template_path = f"{app_name}/templates/{app_name}"
            os.makedirs(app_template_path, exist_ok=True)

            # Define HTML files to create
            html_content = """{% extends 'base.html' %}
{% block title %}Page Title{% endblock %}
{% block description %}Page Description{% endblock %}
{% block content %}Page content goes here.{% endblock %}
"""
            html_files = ["index.html", "about.html", "contact.html", "privacy.html", "portfolio.html"]
            for filename in html_files:
                with open(f"{app_template_path}/{filename}", 'w') as f:
                    f.write(html_content)
                    print(f"Created {filename} in {app_template_path}")

            # Additional app files
            with open(f"{app_name}/urls.py", 'w') as f:
                f.write("from django.urls import path\n\nurlpatterns = []\n")
            with open(f"{app_name}/forms.py", 'w') as f:
                f.write("from django import forms\n\n")

        # Environment files
        env_content = (
            "# Environment variables\n"
            "DEBUG=True\n"
            "SECRET_KEY=your-secret-key\n"
            "DATABASE_URL=your-database-url\n"
        )
        with open(".env", 'w') as f:
            f.write(env_content)
        with open(".env-template", 'w') as f:
            f.write(env_content)

    @staticmethod
    def prompt_tailwind_installation(app_name):
        """Prompt for Tailwind CSS installation."""
        response = input("Do you want to install Tailwind CSS? [y/n]: ").strip().lower()
        if response in ['y', 'yes']:
            DjangoProjectManager.setup_tailwind(app_name)
            print("Tailwind CSS setup complete.")
        else:
            with open("static/css/style.css", 'w') as f:
                f.write("/* Custom styles */")
            print("Skipping Tailwind CSS installation. Only style.css has been created.")

    @staticmethod
    def setup_tailwind(app_name):
        """Install and configure Tailwind CSS."""
        subprocess.run(['npm', 'init', '-y'], check=True)
        subprocess.run(['npm', 'install', 'tailwindcss'], check=True)
        subprocess.run(['npx', 'tailwindcss', 'init'], check=True)

        # Create Tailwind CSS and output files
        os.makedirs("static/css", exist_ok=True)
        with open("static/css/tailwind.css", 'w') as f:
            f.write("/* tailwind css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;")
        with open("static/css/output.css", 'w') as f:
            f.write("/* output.css generated by Tailwind build */")
        with open("static/css/style.css", 'w') as f:
            f.write("/* Custom styles */")

        # Modify tailwind.config.js content paths
        with open("tailwind.config.js", 'r') as f:
            content = f.read()
        content_paths = [
            "./templates/**/*.html",
            "./static/js/**/*.js",
            f"./{app_name}/templates/{app_name}/**/*.html" if app_name else ""
        ]
        content = content.replace("content: []", f"content: {content_paths}")
        with open("tailwind.config.js", 'w') as f:
            f.write(content)

        # Update package.json with Tailwind scripts
        with open("package.json", 'r') as f:
            package_json = f.read()
        package_json = package_json.replace(
            '"scripts": {',
            '"scripts": {\n    "build": "npx tailwindcss -i ./static/css/tailwind.css -o ./static/css/output.css --minify",\n'
            '    "watch": "npx tailwindcss -i ./static/css/tailwind.css -o ./static/css/output.css --watch",\n'
            '    "dev": "npx tailwindcss -i ./static/css/tailwind.css -o ./static/css/output.css --watch",'
        )
        with open("package.json", 'w') as f:
            f.write(package_json)
